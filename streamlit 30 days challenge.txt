< st.header() >
- 헤더 이름 작성
< st.subheader() >
- 부제목 작성
< st.title() >
- 제목 작성
< st.info() >
- 일반적인 정보다 가이드라인을 전달할 때 사용됨

< st.write >
- dataframe
- markdown 형식
	- st.write('~~')
- number(숫자) 등
- formatting 처럼 작동
	- f"{}"으로 작성하면 글씨에 상자가 생기지 않음 but 작동은 함
- 여러 형식으로 작성 가능


< st.slider >
- int, float, date, time, datetime 형식만 지원됨
- st.slider('슬라이더 위젯 위 텍스트', min, max, default(lower, upper limit))
+) lower & upper limit: 하한, 상한 표시 가능
	~ 범위 바 자체 는 min, max 로 설정
- 시간:
	- st.slider("text", value=(time(hour, min), time(h, m)))
		~ lower limit time, upper limit time 
		~ *** 범위 바 자체가 아니라 선택된 값 중 하한, 상한 값이 설정되는 것임
		~ 범위 바 자체는 따로 설정하지 않아도 작동됨
- 시간 및 날짜
	- datetime module 사용
	- st.slider('text', value=datetime(Year, Month, Date, hour, minute),
	  format="MM/DD/YY - hh:mm"
	~ format은 document 찾아서 다양하게 사용 가능
	- 날짜만 변경됨


< st.line_chart >
- st.altair_chart 구문의 단순화


< st.selectbox >
- 선택 위젯 표시
- set_option_value = st.selectbox('text', (options))
- st.write('text', option_value)
	~ option_value: 하나의 값만 출력함


< st.multiselect >
- 여러 항목을 선택할 수 있는 위젯
- st.multiselect('text', [options_1 list], [options_2 list])


< st.checkbox >
- 체크박스 위젯
- 여러개 변수로 다수의 체크박스 생성
	- icecream = st.checkbox('ice cream')
	- coffee = st.checkbox('coffee')
	- coke = st.checkbox('coke')
- 여러개 동시에 체크 가능


< streamlit component >
- component(컴포넌트): streamlit의 기능성 확장 python module
- 설치
	- pip streamlit_pandas_profiling
- 임포트 하는 것
	- import ydata_profiling (구버전: pandas_profiling)
	- from ydata_profiling import ProfileReport

( profile_report )
- pr = df.profile_report()
- ProfileReport(pr)


< st.latex >
- LaTeX로 서식이 지정된 수학적 표현 표시
- LaTeX 구문으로 수학 방정식 표시 간단한 앱

< streamlit 앱 테마 사용자 정의하기 >
- .streamlit 폴더 내의 앱과 동일한 폴더에 저장된 config.toml 구성 파일의 매개변수 조정하여 테마 사용자 정의 가능
- .streamlit/config.toml 파일 내의 HTML HEX 코드를 사용자 정의함으로 가능


< st.secrets >
- API 키, 데이터베이스 비밀번호, 기타 자격 증명과 같은 비밀정보 저장 가능
- st.secrets['key_name']
- *주의사항:
	- 로컬에서 작업하는 경우, .streamlit/secrets.toml 에 저장할 수 있지만,
	- 앱 배포 시, GitHub Repo에 업로드 하지 않도록 주의하기 
- .streamlit 폴더 아래
	- secrets.toml 파일 안에
		- key_name = 'secret 내용'

< .gitignore >
- 작업 디렉토리 안에 직접 .gitignore 파일 생성
- 내용에 폴더 혹은 파일 이름 작성 하기
- 숨길 폴더 혹은 파일

- 이미 추적 중인 경우~ 캐시에서 제거
- 디렉터리 전체를 git 추적에서 제거
	- git rm -r --cached (file_name)
	- 변경 사항 커밋: commit
	- GitHub push: push


< st.file_uploader >
- 파일 업로더 위젯 표시
- 기본~ 업로드된 파일 200MB 로 제한됨
	- server.maxUploadSize 로 구성 옵션 사용하여 설정 가능
- st.file_uploader("text")


< app layout configure >
- st.set_page_config(layout="wide")
	- 앱의 내용을 넓은 모드로 표시
- st.sidebar
	- 디스플레이 사이드바에 배치
	~ 위젯, 텍스트. 이미지 디스플레이 등
- st.expander
	- 접을 수 있는 컨테이너 박스
	~ 내부에 위젯, 택스트, 이미지 디스플레이 등
	- with st.expander():
		- 내부에 내용을 포함한 블록을 작성할 때 가장 일반적인 방법
- st.columns
	- 표 형태의 공간 또는 열 생성
	~ 컨텐츠 내부 배치 가능
	- 기본이 표 레이아웃으로 나오지 않음 (dataframe ?)

< st.progress >
- 반복이 진행됨에 따라 그래픽으로 업데이트되는 진행률 표시줄 보여줌
- 사용자가 무엇을 하는 것에 따른 진행률이 아닌 자동 계산 후 출력
- 코드 예시
	my_bar = st.progress(0)
	~ 진행률 표시줄 정의, 시작값 0으로 설정

	for percent_complete in range(100):
	     time.sleep(0.05)
     	     my_bar.progress(percent_complete + 1)
	~ 앱이 0.05초 동안 대기한 후에 진행률 표시줄에 1 추가

	st.balloons()
	~ 끝나면 풍선 효과가 등장함


< st.form >
- 제출 버튼 포함하여 욧들을 함께 묶는 양식 생성
- 일반적: 사용자가 위젯과 상호작용하는 모든 동작~ Streamlit 앱 재실행
- st.form: 양식은 다른 요소 및 위젯들을 시각적으로 그룹화하는 컨테이너, 제출버튼 포함
	- 사용자가 제출 버튼 누르기 전까지 재실행 없이 여러번 상호작용 가능
	- 제출로 한 번에 양식 내 값이 Streamlit에 전송됨
- 요소 추가 방식
	- with 표기법
	- 객체 표기법: 변수에 할당한 후 Streamlit method 적용 후 양식에 method 직접 호출
- 제약 사항
	- 모든 양식 st.form_submit_button 포함해야함
	- st.button, st.download_button 은 양식에 추가 불가능
	- 양식 앱 사이드바, 칼럼 등에 나타낼 수 있음 but, 다른 양식 내에 포함은 불가능

< st.query_params (st.experimental_get_query_params) >
- 사용자 브라우저의 URL에서 직접 쿼리 매개변수를 검색 가능하게 해줌


< st.cache >
- @st.cache (st.cache 데코레이터)를 사용자 정의 **함수**의 앞줄에 작성
- Streamlit 앱의 성능을 최적화하는데 도움을 줌
	- 웹에서 데이터 로드
	- 큰 데이터셋 조작
	- 비용이 많이 드는 계산 수행
	~ 앱의 성능 유지 가능하게 해주는 캐싱 메커니즘 제공
- @st.cache 사용 시
	~ Streamlit에 확인 지시
	- 함수 호출시 사요한 입력 매개변수
	- 함수에서 사용된 모든 외부 변수의 값
	- 함수의 본문
	- 캐시된 함수 내에서 사요된 모든 함수의 본문
~ 정확한 값과 순서로 streamlit에 나타나는 경우
	~> 함수 실행, 결과 로컬 캐시에 저장
	~> 이후 캐시된 함수 호출 시, 변경 없으면 함수 실행 X, 캐시에 저장된 이전 출력 반환
- 구성 요소의 변경 사항 추적하는 방법
	~ 해싱을 통한 것


< st.session_state >
- session: 
	~ 브라우저 탭에서의 streamlit 앱 접속
	- streamlit 서버 연결 각 브라우저 탭~ 새로운 세션 생성
	- 스크립트 재실행~ 앱과의 상호작용마다
		~ 재실행은 백지상태에서 
- session status(세션 상태):
	~ 각 사용자 세션 간에 변수를 공유하는 방법
	- 상태 저장, 유지 능력
	- 콜백 사용 상태 조작 가능 기능 제공

< st.number_input >
- 숫자 입력 받기
- st.number_input("labels", key=key, on_change= (def_name))
	~ st.number_input 명령으로 생성된 숫자 상자에 숫자가 입력되자마자 호출죔
	~ on_change 옵션에는 함수 지정됨
	~ 숫자 입력함녀 사용자 정의 함수들에 의해 숫자가 변환됨
- 숫자 입력 가능, + - 로도 조정가능한 형태 


( st. session_state & st.number_input 실습 예제 )
# 체중 변환 함수 (lbs<->kg)
def lbs_to_kg():
    st.session_state.kg = st.session_state.lbs/2.2046
def kg_to_lbs():
    st.session_state.lbs = st.session_state.kg*2.2046

# 체중값 입력 받기
st.header('Input')

# 숫자 입력 가능, + - 로도 조정가능한 형태 
col1, spacer, col2 = st.columns([2, 1, 2]) # ~ 상대적인 비율 조절
with col1:
    pounds = st.number_input("Pounds:", key = "lbs", on_change = lbs_to_kg)
with col2:
    kilogram = st.number_input("Kilogram:", key = "kg", on_change = kg_to_lbs)
~ key 값, st.session_state."key"로 설정함

# 세션 상태 저장 값 ~ st.session_state.kg 과 st.session.lbs로 st.write를 통해 출력
st.header('Print')
st.write('st.session_state Object:', st.session_state)
# {
#     "kg": ~~
#     "lbs": ~~
# } 의 형태로 출력됨


< st.metric() >
- display a metric in big bold font (특정 지표 강조 표현) 
- st.metrice(label="", value=, delta='')
	~ delta: 변화량 함께 표시 가능, 어떻게 변화하였는지
		~ down: arrow points up, text red
		~ up: arrow points down, text greem


< Streamlit Elements >
- okld 제작 third-party component
- Material Ui widget, Monaco 편집기(VS Code), Nivo 차트 등 사용
~ 심미적인 애플리케이션과 대시보드 구성 가능 도구 제공

- 설치
	- pip install streamlit-elements=0.1.*
		~ 0.1.*: 버전 고정하는 것

< Path >
- from pathlib import Path
-예제 코드
~ if "data" not in st.session_state:
      st.session_state.data = Path("streamlit_tuto_day27.jsonn").read_text()
	- Path: 현재 실행 중인 python 스크립트와 동일한 디렉토리에 파일이 잇을것이라고 가정하고 		파일 텍스트를 읽음

< streamlit-shap >
 - SHAP 플롯 표시 목적 래퍼 제공 component
- 설치
	- pip install streamlit-shap
	- matplotlib, pandas, scikit-learn, xgboost 설치 필요